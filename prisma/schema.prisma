generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String?
  provider_id  String?       @unique
  provider     AuthProvider  @default(EMAIL_PASSWORD)
  applications Application[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@index([email])
}

model Organization {
  id         String     @id @default(uuid())
  name       String
  employers  Employer[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([name])
}

model Employer {
  id              String        @id @default(uuid())
  email           String        @unique
  name            String
  password        String?
  provider_id     String?       @unique
  provider        AuthProvider  @default(EMAIL_PASSWORD)
  organization    Organization? @relation(fields: [organization_id], references: [id])
  organization_id String?
  jobs            Job[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@index([organization_id])
  @@index([email])
}

model Job {
  id                    String           @id @default(cuid())
  employer              Employer         @relation(fields: [employerId], references: [id])
  employerId            String           @unique
  status                JobStatus
  company_name          String
  job_title             String
  job_type              JobType
  is24_7                Boolean
  work_location_type    WorkLocationType
  office_address        String?
  pay_type              PayType
  fixed_salary          String?
  avg_incentive         String?
  perks                 String
  joining_fee_required  Boolean
  joining_fee           String?
  minimum_edu           EducationLevel
  english_level         EnglishLevel
  experience_level      ExperienceLevel
  total_experience      String?
  gender                Gender?
  age                   String?
  regional_languages    String
  required_assets       String
  skills                String
  jd                    String?
  interview_type        InterviewType
  interview_address     String?
  walk_in_start_date    String?
  walk_in_end_date      String?
  walk_in_timings       String?
  other_instructions    String?
  online_interview_link String?
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  applications          Application[]

  @@index([employerId])
}

model Application {
  id                 String            @id @default(uuid())
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  job                Job               @relation(fields: [jobId], references: [id])
  jobId              String
  application_status ApplicationStatus
  last_updated       DateTime
  resume_id          String
  cover_letter       String?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  @@index([userId])
  @@index([jobId])
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  planId     String
  pg_orderId String   @unique
  pg         String
  amount     String
  currency   String
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userId])
  @@index([planId])
}

model Plan {
  id             String   @id @default(cuid())
  name           String   @unique
  amount         Int
  display_amount Int
  credits        Int
  description    String?
  isActive       Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
  LINKEDIN
}

enum ApplicationStatus {
  application_recieved
  under_review
  shortlisted
  assessment_scheduled
  interview_scheduled
  interview_in_progress
  interview_completed
  offer_made
  offer_accepted
  offer_rejected
  hired
  rejected
  on_hold
}

enum JobStatus {
  active
  paused
  closed
}

enum JobType {
  full_time
  part_time
  both
}

enum WorkLocationType {
  hybrid
  remote
}

enum PayType {
  fixed_only
  fixed_and_incentive
  incentive_only
}

enum EducationLevel {
  ten_or_below_10
  twelve_pass
  diploma
  graduate
}

enum EnglishLevel {
  NA
  basic
  intermediate
  proficient
}

enum ExperienceLevel {
  freshers
  intermediate
  experts
}

enum Gender {
  male
  female
  both
}

enum InterviewType {
  in_person
  walk_in
  telephonic_online
}
